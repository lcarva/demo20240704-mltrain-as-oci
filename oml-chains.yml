apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: oml-chains
spec:
  description: >-
    This Task builds a simple Dockerfile with ... and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
  - name: IMAGE
    description: (ignored actually).
    default: quay.io/mmortari/ml-iris:v1
  workspaces:
  - name: source
    description: Holds the context and Dockerfile
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
    mountPath: /home/oml/.docker
  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: URL of the image just built.
  steps:
  - name: oml-train-and-push
    workingDir: $(workspaces.source.path)
    image: quay.io/mmortari/demo20240704-mltrain-as-oci:latest
    script: |
      whoami
      pwd
      ls -la
      python /app/train_model.py 
      python /app/report_sha.py | tee $(results.IMAGE_DIGEST.path)
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    # securityContext:
    #   runAsUser: 0
  - name: write-url
    image: bash
    script: |
      set -e
      echo $(params.IMAGE) | tee $(results.IMAGE_URL.path)
    # securityContext:
    #   runAsUser: 0
